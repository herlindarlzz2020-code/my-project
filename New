// src/context/AuthContext.js
import React, { createContext, useState, useEffect } from "react";
import axios from "axios";
import jwtDecode from "jwt-decode";

export const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [auth, setAuth] = useState(() => {
    const token = localStorage.getItem("token");
    const role = localStorage.getItem("role");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        return {
          token,
          role,
          user: {
            id: decoded.nameid,
            username: decoded.unique_name,
          },
        };
      } catch {
        return { token: null, role: null, user: null };
      }
    }
    return { token: null, role: null, user: null };
  });

  const login = async (email, password) => {
    try {
      const res = await axios.post("http://localhost:5290/api/Auth/login", {
        email,
        password,
      });

      const { token } = res.data;
      const decoded = jwtDecode(token);

      const newAuth = {
        token,
        role: decoded.role,
        user: {
          id: decoded.nameid,
          username: decoded.unique_name,
        },
      };

      setAuth(newAuth);

      localStorage.setItem("token", token);
      localStorage.setItem("role", decoded.role);

      return { success: true, role: decoded.role };
    } catch (err) {
      return { success: false, message: err.response?.data || "Login failed" };
    }
  };

  const logout = () => {
    setAuth({ token: null, role: null, user: null });
    localStorage.removeItem("token");
    localStorage.removeItem("role");
  };

  return (
    <AuthContext.Provider value={{ auth, setAuth, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};// src/pages/LoginPage.js
import React, { useState, useContext } from "react";
import { Form, Button, Container, Card, Alert } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import { AuthContext } from "../context/AuthContext";

function LoginPage() {
  const { login } = useContext(AuthContext);
  const navigate = useNavigate();
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);

    const res = await login(email, password);

    if (res.success) {
      if (res.role === "Employer") {
        navigate("/employer-dashboard");
      } else if (res.role === "JobSeeker") {
        navigate("/jobseeker-dashboard");
      } else {
        setError("Invalid role detected.");
      }
    } else {
      setError(res.message);
    }
  };

  return (
    <Container className="d-flex justify-content-center align-items-center vh-100">
      <Card className="p-4 shadow-sm" style={{ width: "400px" }}>
        <h3 className="text-center mb-4">Login to CareerLync</h3>
        {error && <Alert variant="danger">{error}</Alert>}
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              placeholder="Enter email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Password</Form.Label>
            <Form.Control
              type="password"
              placeholder="Enter password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
            />
          </Form.Group>

          <Button variant="primary" type="submit" className="w-100">
            Login
          </Button>
        </Form>
      </Card>
    </Container>
  );
}

export default LoginPage;// src/pages/RegisterPage.js
import React, { useState } from "react";
import { Form, Button, Container, Card, ToggleButtonGroup, ToggleButton, Alert } from "react-bootstrap";
import axios from "axios";
import { useNavigate } from "react-router-dom";

function RegisterPage() {
  const navigate = useNavigate();
  const [role, setRole] = useState("JobSeeker");
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
  });
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);

    try {
      await axios.post("http://localhost:5290/api/Auth/register", {
        ...formData,
        role,
      });

      setSuccess("Registration successful! Redirecting to login...");
      setTimeout(() => navigate("/login"), 1500);
    } catch (err) {
      setError(err.response?.data || "Registration failed");
    }
  };

  return (
    <Container className="d-flex justify-content-center align-items-center vh-100">
      <Card className="p-4 shadow-sm" style={{ width: "450px" }}>
        <h3 className="text-center mb-3">Register for CareerLync</h3>

        <div className="mb-3 text-center">
          <ToggleButtonGroup type="radio" name="role" value={role} onChange={setRole}>
            <ToggleButton id="jobseeker" value="JobSeeker" variant="outline-primary">
              Job Seeker
            </ToggleButton>
            <ToggleButton id="employer" value="Employer" variant="outline-success">
              Employer
            </ToggleButton>
          </ToggleButtonGroup>
        </div>

        {error && <Alert variant="danger">{error}</Alert>}
        {success && <Alert variant="success">{success}</Alert>}

        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Username</Form.Label>
            <Form.Control
              type="text"
              placeholder="Enter username"
              name="username"
              value={formData.username}
              onChange={handleChange}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              placeholder="Enter email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Password</Form.Label>
            <Form.Control
              type="password"
              placeholder="Enter password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              required
            />
          </Form.Group>

          <Button variant="success" type="submit" className="w-100">
            Register
          </Button>
        </Form>
      </Card>
    </Container>
  );
}

export default RegisterPage;// src/pages/JobSeekerDashboard.js
import React, { useContext, useEffect, useState } from "react";
import { Container, Card, Button, Table, Alert } from "react-bootstrap";
import axios from "axios";
import { AuthContext } from "../context/AuthContext";

function JobSeekerDashboard() {
  const { auth, logout } = useContext(AuthContext);
  const [jobs, setJobs] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchJobs = async () => {
      try {
        const res = await axios.get("http://localhost:5290/api/Jobs", {
          headers: { Authorization: `Bearer ${auth.token}` },
        });
        setJobs(res.data);
      } catch (err) {
        setError("Failed to load jobs");
      }
    };

    fetchJobs();
  }, [auth.token]);

  return (
    <Container className="mt-5">
      <Card className="p-4 shadow-sm">
        <h2>Welcome, {auth.user?.username}</h2>
        <h5 className="text-muted">Job Seeker Dashboard</h5>
        <Button variant="danger" className="mb-3" onClick={logout}>
          Logout
        </Button>
        {error && <Alert variant="danger">{error}</Alert>}
        <h4>Available Jobs</h4>
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>Job Title</th>
              <th>Description</th>
              <th>Location</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {jobs.map((job) => (
              <tr key={job.jobId}>
                <td>{job.title}</td>
                <td>{job.description}</td>
                <td>{job.location}</td>
                <td>
                  <Button variant="primary" size="sm">
                    Apply
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </Table>
      </Card>
    </Container>
  );
}

export default JobSeekerDashboard;// src/pages/EmployerDashboard.js
import React, { useContext, useEffect, useState } from "react";
import { Container, Card, Button, Table, Alert } from "react-bootstrap";
import axios from "axios";
import { AuthContext } from "../context/AuthContext";

function EmployerDashboard() {
  const { auth, logout } = useContext(AuthContext);
  const [jobs, setJobs] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchJobs = async () => {
      try {
        const res = await axios.get("http://localhost:5290/api/Jobs/employer", {
          headers: { Authorization: `Bearer ${auth.token}` },
        });
        setJobs(res.data);
      } catch (err) {
        setError("Failed to load employer jobs");
      }
    };

    fetchJobs();
  }, [auth.token]);

  return (
    <Container className="mt-5">
      <Card className="p-4 shadow-sm">
        <h2>Welcome, {auth.user?.username}</h2>
        <h5 className="text-muted">Employer Dashboard</h5>
        <Button variant="danger" className="mb-3" onClick={logout}>
          Logout
        </Button>
        {error && <Alert variant="danger">{error}</Alert>}
        <h4>Your Job Listings</h4>
        <Table striped bordered hover>
          <thead>
            <tr>
              <th>Job Title</th>
              <th>Description</th>
              <th>Applications</th>
            </tr>
          </thead>
          <tbody>
            {jobs.map((job) => (
              <tr key={job.jobId}>
                <td>{job.title}</td>
                <td>{job.description}</td>
                <td>{job.applications?.length || 0}</td>
              </tr>
            ))}
          </tbody>
        </Table>
        <Button variant="success">Post New Job</Button>
      </Card>
    </Container>
  );
}

export default EmployerDashboard;// src/App.js
import React, { useContext } from "react";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import "bootstrap/dist/css/bootstrap.min.css";

import HomePage from "./pages/HomePage";
import LoginPage from "./pages/LoginPage";
import RegisterPage from "./pages/RegisterPage";
import JobSeekerDashboard from "./pages/JobSeekerDashboard";
import EmployerDashboard from "./pages/EmployerDashboard";

import { AuthContext } from "./context/AuthContext";

// ✅ Private Route wrapper
const PrivateRoute = ({ children, role }) => {
  const { auth } = useContext(AuthContext);

  if (!auth || !auth.token) {
    return <Navigate to="/login" />;
  }

  if (role && auth.user?.role !== role) {
    // Wrong role trying to access → redirect to their correct dashboard
    return <Navigate to={`/${auth.user.role.toLowerCase()}-dashboard`} />;
  }

  return children;
};

function App() {
  return (
    <Router>
      <Routes>
        {/* Public routes */}
        <Route path="/" element={<HomePage />} />
        <Route path="/login" element={<LoginPage />} />
        <Route path="/register" element={<RegisterPage />} />

        {/* JobSeeker only */}
        <Route
          path="/jobseeker-dashboard"
          element={
            <PrivateRoute role="JobSeeker">
              <JobSeekerDashboard />
            </PrivateRoute>
          }
        />

        {/* Employer only */}
        <Route
          path="/employer-dashboard"
          element={
            <PrivateRoute role="Employer">
              <EmployerDashboard />
            </PrivateRoute>
          }
        />

        {/* Catch-all route */}
        <Route path="*" element={<Navigate to="/" />} />
      </Routes>
    </Router>
  );
}

export default App;
