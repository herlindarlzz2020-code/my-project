// src/Pages/JobSeekerDashboard.js
import React, { useState, useEffect } from "react";
import axios from "axios";
import "./Dashboard.css"; // optional custom styles

const JobSeekerDashboard = () => {
  const [activeTab, setActiveTab] = useState("profile");
  const [profile, setProfile] = useState({
    id: null,
    fullName: "",
    email: "",
    phoneNumber: "",
    education: "",
    experience: "",
    skills: "",
  });
  const [jobs, setJobs] = useState([]);
  const [applications, setApplications] = useState([]);

  // Fetch jobs (example GET call)
  useEffect(() => {
    axios
      .get("http://localhost:5290/api/jobs")
      .then((res) => setJobs(res.data))
      .catch((err) => console.error("Error fetching jobs", err));
  }, []);

  // Save profile (create or update)
  const saveProfile = async () => {
    try {
      if (profile.id) {
        await axios.put(`http://localhost:5290/api/jobseeker/${profile.id}`, {
          FullName: profile.fullName,
          Email: profile.email,
          PhoneNumber: profile.phoneNumber,
          Education: profile.education,
          Experience: profile.experience,
          Skills: profile.skills,
        });
      } else {
        const res = await axios.post("http://localhost:5290/api/jobseeker", {
          FullName: profile.fullName,
          Email: profile.email,
          PhoneNumber: profile.phoneNumber,
          Education: profile.education,
          Experience: profile.experience,
          Skills: profile.skills,
        });
        setProfile({ ...profile, id: res.data.id });
      }
      alert("✅ Profile saved successfully!");
    } catch (err) {
      console.error(err);
      alert("❌ Error saving profile: " + (err.response?.data || err.message));
    }
  };

  // Apply to a job
  const applyJob = async (jobId) => {
    try {
      await axios.post(`http://localhost:5290/api/applications`, {
        JobId: jobId,
        JobSeekerId: profile.id,
      });
      alert("✅ Applied successfully!");
    } catch (err) {
      console.error(err);
      alert("❌ Error applying: " + (err.response?.data || err.message));
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-5xl mx-auto">
        {/* Header */}
        <header className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-gray-800">Job Seeker Dashboard</h1>
          <p className="text-gray-500">Manage your profile, search jobs, and track applications</p>
        </header>

        {/* Tabs */}
        <div className="flex justify-center mb-6 space-x-4">
          <button
            className={`px-4 py-2 rounded-full ${
              activeTab === "profile"
                ? "bg-blue-600 text-white"
                : "bg-white border text-gray-600"
            }`}
            onClick={() => setActiveTab("profile")}
          >
            Profile
          </button>
          <button
            className={`px-4 py-2 rounded-full ${
              activeTab === "search"
                ? "bg-blue-600 text-white"
                : "bg-white border text-gray-600"
            }`}
            onClick={() => setActiveTab("search")}
          >
            Job Search
          </button>
          <button
            className={`px-4 py-2 rounded-full ${
              activeTab === "applications"
                ? "bg-blue-600 text-white"
                : "bg-white border text-gray-600"
            }`}
            onClick={() => setActiveTab("applications")}
          >
            My Applications
          </button>
        </div>

        {/* Profile Tab */}
        {activeTab === "profile" && (
          <div className="bg-white shadow-md rounded-xl p-6 space-y-4">
            <h2 className="text-xl font-semibold text-gray-700 mb-4">My Profile</h2>
            <input
              type="text"
              placeholder="Full Name"
              value={profile.fullName}
              onChange={(e) => setProfile({ ...profile, fullName: e.target.value })}
              className="w-full border rounded-lg p-2"
            />
            <input
              type="email"
              placeholder="Email"
              value={profile.email}
              onChange={(e) => setProfile({ ...profile, email: e.target.value })}
              className="w-full border rounded-lg p-2"
            />
            <input
              type="text"
              placeholder="Phone Number"
              value={profile.phoneNumber}
              onChange={(e) => setProfile({ ...profile, phoneNumber: e.target.value })}
              className="w-full border rounded-lg p-2"
            />
            <textarea
              placeholder="Education"
              value={profile.education}
              onChange={(e) => setProfile({ ...profile, education: e.target.value })}
              className="w-full border rounded-lg p-2"
            />
            <textarea
              placeholder="Experience"
              value={profile.experience}
              onChange={(e) => setProfile({ ...profile, experience: e.target.value })}
              className="w-full border rounded-lg p-2"
            />
            <textarea
              placeholder="Skills"
              value={profile.skills}
              onChange={(e) => setProfile({ ...profile, skills: e.target.value })}
              className="w-full border rounded-lg p-2"
            />
            <button
              onClick={saveProfile}
              className="w-full bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition"
            >
              Save Profile
            </button>
          </div>
        )}

        {/* Job Search Tab */}
        {activeTab === "search" && (
          <div className="bg-white shadow-md rounded-xl p-6">
            <h2 className="text-xl font-semibold text-gray-700 mb-4">Available Jobs</h2>
            <div className="grid md:grid-cols-2 gap-4">
              {jobs.map((job) => (
                <div
                  key={job.id}
                  className="border rounded-lg p-4 shadow-sm hover:shadow-md transition"
                >
                  <h3 className="text-lg font-bold text-gray-800">{job.title}</h3>
                  <p className="text-gray-600">{job.description}</p>
                  <p className="text-gray-500 text-sm">{job.location}</p>
                  <button
                    onClick={() => applyJob(job.id)}
                    className="mt-3 bg-green-600 text-white px-3 py-1 rounded-md hover:bg-green-700"
                  >
                    Apply
                  </button>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Applications Tab */}
        {activeTab === "applications" && (
          <div className="bg-white shadow-md rounded-xl p-6">
            <h2 className="text-xl font-semibold text-gray-700 mb-4">My Applications</h2>
            {applications.length > 0 ? (
              <ul className="space-y-2">
                {applications.map((app) => (
                  <li
                    key={app.id}
                    className="border p-3 rounded-md flex justify-between items-center"
                  >
                    <span>{app.jobTitle}</span>
                    <span className="text-sm text-gray-500">{app.status}</span>
                  </li>
                ))}
              </ul>
            ) : (
              <p className="text-gray-500">You haven’t applied to any jobs yet.</p>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default JobSeekerDashboard;

import React, { createContext, useContext, useState, useEffect } from "react";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [auth, setAuth] = useState(null);

  // Load auth from localStorage on app start
  useEffect(() => {
    const storedAuth = localStorage.getItem("authData");
    if (storedAuth) {
      setAuth(JSON.parse(storedAuth));
    }
  }, []);

  const login = (authData) => {
    setAuth(authData);
    localStorage.setItem("authData", JSON.stringify(authData));
  };

  const logout = () => {
    setAuth(null);
    localStorage.removeItem("authData");
  };

  return (
    <AuthContext.Provider value={{ auth, setAuth: login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";
import jwtDecode from "jwt-decode";

const LoginPage = () => {
  const navigate = useNavigate();
  const { setAuth } = useAuth();

  const [form, setForm] = useState({ email: "", password: "" });
  const [toggleRole, setToggleRole] = useState("JobSeeker"); // UI toggle
  const [error, setError] = useState("");

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleRoleToggle = (selectedRole) => {
    setToggleRole(selectedRole);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      // Send with capitalized keys to match your C# LoginDto
      const res = await axios.post("http://localhost:5290/api/auth/login", {
        Email: form.email,
        Password: form.password,
      });

      const { token } = res.data;
      const decoded = jwtDecode(token);

      // Extract claims
      const userId = decoded.sub || decoded.userId;
      const jwtRole =
        decoded[
          "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
        ] || "JobSeeker";

      const authData = { token, role: jwtRole, userId };
      setAuth(authData);

      // Navigate based on toggle (UI choice)
      if (toggleRole === "Employer") {
        navigate("/employer-dashboard");
      } else {
        navigate("/jobseeker-dashboard");
      }
    } catch (err) {
      console.error("Login failed:", err.response?.data || err.message);
      setError("Invalid email or password");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="bg-white shadow-md rounded-lg p-8 w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center">Login</h2>

        {/* Toggle Role */}
        <div className="flex justify-center mb-6">
          <button
            type="button"
            onClick={() => handleRoleToggle("JobSeeker")}
            className={`px-4 py-2 rounded-l-lg ${
              toggleRole === "JobSeeker"
                ? "bg-blue-600 text-white"
                : "bg-gray-200 text-gray-700"
            }`}
          >
            JobSeeker
          </button>
          <button
            type="button"
            onClick={() => handleRoleToggle("Employer")}
            className={`px-4 py-2 rounded-r-lg ${
              toggleRole === "Employer"
                ? "bg-blue-600 text-white"
                : "bg-gray-200 text-gray-700"
            }`}
          >
            Employer
          </button>
        </div>

        {error && <p className="text-red-500 text-sm mb-4">{error}</p>}

        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="email"
            name="email"
            value={form.email}
            onChange={handleChange}
            placeholder="Email"
            className="w-full p-2 border rounded"
            required
          />
          <input
            type="password"
            name="password"
            value={form.password}
            onChange={handleChange}
            placeholder="Password"
            className="w-full p-2 border rounded"
            required
          />
          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg transition"
          >
            Login as {toggleRole}
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;

// src/Pages/LoginPage.js
import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";
import jwtDecode from "jwt-decode";

const LoginPage = () => {
  const navigate = useNavigate();
  const { setAuth } = useAuth();

  const [form, setForm] = useState({ email: "", password: "" });
  const [toggleRole, setToggleRole] = useState("JobSeeker"); // UI toggle
  const [error, setError] = useState("");

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleRoleToggle = (selectedRole) => {
    setToggleRole(selectedRole);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      // backend only needs email + password
      const res = await axios.post("http://localhost:5290/api/auth/login", form);

      const { token } = res.data;
      const decoded = jwtDecode(token);

      const userId = decoded.sub || decoded.userId;
      const jwtRole =
        decoded[
          "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
        ] || "JobSeeker";

      // Save auth data → we’ll respect backend role, but UI shows toggle
      const authData = { token, role: jwtRole, userId };
      setAuth(authData);
      localStorage.setItem("authData", JSON.stringify(authData));

      // Navigate according to toggle (UI-driven)
      if (toggleRole === "Employer") {
        navigate("/employer-dashboard");
      } else {
        navigate("/jobseeker-dashboard");
      }
    } catch (err) {
      console.error("Login failed:", err);
      setError("Invalid email or password");
    }
  };

  return (
    <div className="flex items-center justify-center min-h-screen bg-gray-100">
      <div className="bg-white shadow-md rounded-lg p-8 w-full max-w-md">
        <h2 className="text-2xl font-bold mb-6 text-center">Login</h2>

        {/* Toggle Role */}
        <div className="flex justify-center mb-6">
          <button
            type="button"
            onClick={() => handleRoleToggle("JobSeeker")}
            className={`px-4 py-2 rounded-l-lg ${
              toggleRole === "JobSeeker"
                ? "bg-blue-600 text-white"
                : "bg-gray-200 text-gray-700"
            }`}
          >
            JobSeeker
          </button>
          <button
            type="button"
            onClick={() => handleRoleToggle("Employer")}
            className={`px-4 py-2 rounded-r-lg ${
              toggleRole === "Employer"
                ? "bg-blue-600 text-white"
                : "bg-gray-200 text-gray-700"
            }`}
          >
            Employer
          </button>
        </div>

        {error && <p className="text-red-500 text-sm mb-4">{error}</p>}

        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="email"
            name="email"
            value={form.email}
            onChange={handleChange}
            placeholder="Email"
            className="w-full p-2 border rounded"
            required
          />
          <input
            type="password"
            name="password"
            value={form.password}
            onChange={handleChange}
            placeholder="Password"
            className="w-full p-2 border rounded"
            required
          />
          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg transition"
          >
            Login as {toggleRole}
          </button>
        </form>
      </div>
    </div>
  );
};

export default LoginPage;






// src/Pages/LoginPage.js
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { jwtDecode } from "jwt-decode";
import { Container, Card, Form, Button, Alert } from "react-bootstrap";
import API_BASE_URL from "../apiConfig";
import { useAuth } from "../Context/AuthContext";

const LoginPage = () => {
  const navigate = useNavigate();
  const { login } = useAuth();
  const [form, setForm] = useState({ email: "", password: "" });
  const [error, setError] = useState("");

  const handleChange = (e) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      const res = await axios.post(`${API_BASE_URL}/api/Auth/login`, {
        email: form.email,
        password: form.password,
      });

      const { token } = res.data;
      const decoded = jwtDecode(token);

      const role =
        decoded[
          "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
        ]?.toLowerCase() || "";

      const userId = decoded[
        "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
      ];

      login(token, userId, role); // save in context

      // Navigate based on role
      if (role === "employer") {
        navigate("/employer/dashboard");
      } else if (role === "jobseeker") {
        navigate("/jobseeker/dashboard");
      } else {
        setError("Unknown role in token.");
      }
    } catch (err) {
      console.error(err);
      setError("Invalid email or password.");
    }
  };

  return (
    <Container className="d-flex justify-content-center align-items-center min-vh-100">
      <Card className="p-4 w-100" style={{ maxWidth: "400px" }}>
        <h2 className="text-center mb-4">Login</h2>
        {error && <Alert variant="danger">{error}</Alert>}
        <Form onSubmit={handleSubmit}>
          <Form.Group className="mb-3">
            <Form.Label>Email</Form.Label>
            <Form.Control
              name="email"
              type="email"
              value={form.email}
              onChange={handleChange}
              required
            />
          </Form.Group>

          <Form.Group className="mb-3">
            <Form.Label>Password</Form.Label>
            <Form.Control
              name="password"
              type="password"
              value={form.password}
              onChange={handleChange}
              required
            />
          </Form.Group>

          <Button type="submit" className="w-100">
            Login
          </Button>
        </Form>
      </Card>
    </Container>
  );
};

export default LoginPage;


// src/Context/AuthContext.js
import React, { createContext, useContext, useState, useEffect } from "react";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [auth, setAuth] = useState({
    token: null,
    userId: null,
    role: null,
  });

  // Load from localStorage on mount
  useEffect(() => {
    const storedAuth = localStorage.getItem("authData");
    if (storedAuth) {
      setAuth(JSON.parse(storedAuth));
    }
  }, []);

  const login = (token, userId, role) => {
    const authData = { token, userId, role };
    setAuth(authData);
    localStorage.setItem("authData", JSON.stringify(authData));
  };

  const logout = () => {
    setAuth({ token: null, userId: null, role: null });
    localStorage.removeItem("authData");
  };

  return (
    <AuthContext.Provider value={{ auth, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);


// src/Components/ProtectedRoute.js
import React from "react";
import { Navigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";

const ProtectedRoute = ({ children, allowedRoles }) => {
  const { auth } = useAuth();

  if (!auth.token) {
    // not logged in → redirect to login
    return <Navigate to="/login" replace />;
  }

  if (allowedRoles && !allowedRoles.includes(auth.role)) {
    // logged in but role not allowed → redirect to login
    return <Navigate to="/login" replace />;
  }

  return children;
};

export default ProtectedRoute;


// src/App.js
import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./Context/AuthContext";

import LoginPage from "./Pages/LoginPage";
import EmployerDashboard from "./Pages/EmployerDashboard";
import JobSeekerDashboard from "./Pages/JobSeekerDashboard";
import ProtectedRoute from "./Components/ProtectedRoute";

const App = () => {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/login" element={<LoginPage />} />

          {/* Employer protected route */}
          <Route
            path="/employer/dashboard"
            element={
              <ProtectedRoute allowedRoles={["employer"]}>
                <EmployerDashboard />
              </ProtectedRoute>
            }
          />

          {/* JobSeeker protected route */}
          <Route
            path="/jobseeker/dashboard"
            element={
              <ProtectedRoute allowedRoles={["jobseeker"]}>
                <JobSeekerDashboard />
              </ProtectedRoute>
            }
          />

          {/* Default fallback */}
          <Route path="*" element={<LoginPage />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
};

export default App;


// src/Pages/EmployerDashboard.js
import React from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";

const EmployerDashboard = () => {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Employer Dashboard</h1>
        <button
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow-md transition"
        >
          Logout
        </button>
      </div>

      {/* Dashboard content goes here */}
      <p className="text-gray-700">Welcome! Here you can manage job postings and track applicants.</p>
    </div>
  );
};

export default EmployerDashboard;


// src/Pages/JobSeekerDashboard.js
import React from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";

const JobSeekerDashboard = () => {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      {/* Header */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">JobSeeker Dashboard</h1>
        <button
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg shadow-md transition"
        >
          Logout
        </button>
      </div>

      {/* Dashboard content goes here */}
      <p className="text-gray-700">Welcome! Here you can search for jobs, apply, and manage your applications.</p>
    </div>
  );
};

export default JobSeekerDashboard;


// src/Pages/EmployerDashboard.js
import React from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";

const EmployerDashboard = () => {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Top Navbar */}
      <header className="bg-white shadow-md p-4 flex justify-between items-center">
        <h1 className="text-xl font-bold text-gray-800">Employer Dashboard</h1>
        <button
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition"
        >
          Logout
        </button>
      </header>

      {/* Page Content */}
      <main className="p-6">
        <p className="text-gray-700">
          Welcome! Here you can manage job postings and track applicants.
        </p>
      </main>
    </div>
  );
};

export default EmployerDashboard;


// src/Pages/JobSeekerDashboard.js
import React from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";

const JobSeekerDashboard = () => {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Top Navbar */}
      <header className="bg-white shadow-md p-4 flex justify-between items-center">
        <h1 className="text-xl font-bold text-gray-800">JobSeeker Dashboard</h1>
        <button
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition"
        >
          Logout
        </button>
      </header>

      {/* Page Content */}
      <main className="p-6">
        <p className="text-gray-700">
          Welcome! Here you can search for jobs, apply, and manage your applications.
        </p>
      </main>
    </div>
  );
};

export default JobSeekerDashboard;


// src/Pages/EmployerDashboard.js
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";
import axios from "axios";

const EmployerDashboard = () => {
  const { auth, logout } = useAuth();
  const navigate = useNavigate();

  const [jobs, setJobs] = useState([]);
  const [form, setForm] = useState({
    title: "",
    description: "",
    location: "",
    industry: "",
    instructions: "",
  });
  const [editingJobId, setEditingJobId] = useState(null);

  // 🔹 Logout
  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  // 🔹 Fetch Employer Jobs
  const fetchJobs = async () => {
    try {
      const res = await axios.get(
        `http://localhost:5290/api/employer/${auth.userId}/jobs`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setJobs(res.data);
    } catch (err) {
      console.error("Error fetching jobs:", err);
    }
  };

  useEffect(() => {
    fetchJobs();
  }, []);

  // 🔹 Handle Input Change
  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  // 🔹 Submit Job (Create or Update)
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editingJobId) {
        // update existing job
        await axios.put(
          `http://localhost:5290/api/employer/jobs/${editingJobId}`,
          form,
          { headers: { Authorization: `Bearer ${auth.token}` } }
        );
      } else {
        // create new job
        await axios.post(
          "http://localhost:5290/api/employer/jobs",
          { ...form, employerId: auth.userId },
          { headers: { Authorization: `Bearer ${auth.token}` } }
        );
      }
      setForm({ title: "", description: "", location: "", industry: "", instructions: "" });
      setEditingJobId(null);
      fetchJobs();
    } catch (err) {
      console.error("Error saving job:", err);
    }
  };

  // 🔹 Edit Job
  const handleEdit = (job) => {
    setForm(job);
    setEditingJobId(job.id);
  };

  // 🔹 Delete Job
  const handleDelete = async (jobId) => {
    try {
      await axios.delete(
        `http://localhost:5290/api/employer/jobs/${jobId}`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      fetchJobs();
    } catch (err) {
      console.error("Error deleting job:", err);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar */}
      <header className="bg-white shadow-md p-4 flex justify-between items-center">
        <h1 className="text-xl font-bold text-gray-800">Employer Dashboard</h1>
        <button
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition"
        >
          Logout
        </button>
      </header>

      {/* Main Content */}
      <main className="p-6 space-y-8">
        {/* Job Posting Form */}
        <section className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">
            {editingJobId ? "Edit Job" : "Post a New Job"}
          </h2>
          <form onSubmit={handleSubmit} className="grid gap-4">
            <input
              type="text"
              name="title"
              value={form.title}
              onChange={handleChange}
              placeholder="Job Title"
              className="p-2 border rounded"
              required
            />
            <textarea
              name="description"
              value={form.description}
              onChange={handleChange}
              placeholder="Job Description"
              className="p-2 border rounded"
              required
            />
            <input
              type="text"
              name="location"
              value={form.location}
              onChange={handleChange}
              placeholder="Location"
              className="p-2 border rounded"
              required
            />
            <input
              type="text"
              name="industry"
              value={form.industry}
              onChange={handleChange}
              placeholder="Industry"
              className="p-2 border rounded"
            />
            <textarea
              name="instructions"
              value={form.instructions}
              onChange={handleChange}
              placeholder="Application Instructions"
              className="p-2 border rounded"
            />
            <button
              type="submit"
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
            >
              {editingJobId ? "Update Job" : "Post Job"}
            </button>
          </form>
        </section>

        {/* Job Listings */}
        <section className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Your Job Listings</h2>
          {jobs.length === 0 ? (
            <p className="text-gray-500">No jobs posted yet.</p>
          ) : (
            <table className="w-full border-collapse border">
              <thead>
                <tr className="bg-gray-100">
                  <th className="border p-2">Title</th>
                  <th className="border p-2">Location</th>
                  <th className="border p-2">Industry</th>
                  <th className="border p-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {jobs.map((job) => (
                  <tr key={job.id}>
                    <td className="border p-2">{job.title}</td>
                    <td className="border p-2">{job.location}</td>
                    <td className="border p-2">{job.industry}</td>
                    <td className="border p-2 flex gap-2">
                      <button
                        onClick={() => handleEdit(job)}
                        className="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() => handleDelete(job.id)}
                        className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
      </main>
    </div>
  );
};

export default EmployerDashboard;



// src/Pages/JobSeekerDashboard.js
import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../Context/AuthContext";
import axios from "axios";

const JobSeekerDashboard = () => {
  const { auth, logout } = useAuth();
  const navigate = useNavigate();

  const [profile, setProfile] = useState(null);
  const [profileForm, setProfileForm] = useState({
    fullName: "",
    education: "",
    experience: "",
    skills: "",
  });

  const [jobs, setJobs] = useState([]);
  const [search, setSearch] = useState({ title: "", location: "", industry: "" });

  const [applications, setApplications] = useState([]);

  // 🔹 Logout
  const handleLogout = () => {
    logout();
    navigate("/login");
  };

  // 🔹 Fetch Profile
  const fetchProfile = async () => {
    try {
      const res = await axios.get(
        `http://localhost:5290/api/jobseeker/profile/${auth.userId}`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setProfile(res.data);
      setProfileForm(res.data);
    } catch (err) {
      console.error("No profile yet:", err);
    }
  };

  // 🔹 Save Profile
  const saveProfile = async (e) => {
    e.preventDefault();
    try {
      if (profile) {
        await axios.put(
          `http://localhost:5290/api/jobseeker/profile/${auth.userId}`,
          profileForm,
          { headers: { Authorization: `Bearer ${auth.token}` } }
        );
      } else {
        await axios.post(
          `http://localhost:5290/api/jobseeker/profile`,
          { ...profileForm, userId: auth.userId },
          { headers: { Authorization: `Bearer ${auth.token}` } }
        );
      }
      fetchProfile();
    } catch (err) {
      console.error("Error saving profile:", err);
    }
  };

  // 🔹 Job Search
  const searchJobs = async () => {
    try {
      const query = `title=${search.title}&location=${search.location}&industry=${search.industry}`;
      const res = await axios.get(
        `http://localhost:5290/api/jobs?${query}`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setJobs(res.data);
    } catch (err) {
      console.error("Error fetching jobs:", err);
    }
  };

  // 🔹 Apply to Job
  const applyJob = async (jobId) => {
    try {
      await axios.post(
        `http://localhost:5290/api/jobseeker/applications`,
        { userId: auth.userId, jobId },
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      fetchApplications();
    } catch (err) {
      console.error("Error applying to job:", err);
    }
  };

  // 🔹 Fetch Applications
  const fetchApplications = async () => {
    try {
      const res = await axios.get(
        `http://localhost:5290/api/jobseeker/applications/${auth.userId}`,
        { headers: { Authorization: `Bearer ${auth.token}` } }
      );
      setApplications(res.data);
    } catch (err) {
      console.error("Error fetching applications:", err);
    }
  };

  useEffect(() => {
    fetchProfile();
    fetchApplications();
  }, []);

  // 🔹 Handle Profile Form Input
  const handleProfileChange = (e) => {
    setProfileForm({ ...profileForm, [e.target.name]: e.target.value });
  };

  // 🔹 Handle Search Input
  const handleSearchChange = (e) => {
    setSearch({ ...search, [e.target.name]: e.target.value });
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar */}
      <header className="bg-white shadow-md p-4 flex justify-between items-center">
        <h1 className="text-xl font-bold text-gray-800">JobSeeker Dashboard</h1>
        <button
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition"
        >
          Logout
        </button>
      </header>

      {/* Main Content */}
      <main className="p-6 space-y-8">
        {/* Profile Section */}
        <section className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">My Profile</h2>
          <form onSubmit={saveProfile} className="grid gap-4">
            <input
              type="text"
              name="fullName"
              value={profileForm.fullName}
              onChange={handleProfileChange}
              placeholder="Full Name"
              className="p-2 border rounded"
              required
            />
            <textarea
              name="education"
              value={profileForm.education}
              onChange={handleProfileChange}
              placeholder="Education"
              className="p-2 border rounded"
            />
            <textarea
              name="experience"
              value={profileForm.experience}
              onChange={handleProfileChange}
              placeholder="Work Experience"
              className="p-2 border rounded"
            />
            <input
              type="text"
              name="skills"
              value={profileForm.skills}
              onChange={handleProfileChange}
              placeholder="Skills (comma separated)"
              className="p-2 border rounded"
            />
            <button
              type="submit"
              className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
            >
              Save Profile
            </button>
          </form>
        </section>

        {/* Job Search Section */}
        <section className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">Search Jobs</h2>
          <div className="grid md:grid-cols-3 gap-4 mb-4">
            <input
              type="text"
              name="title"
              value={search.title}
              onChange={handleSearchChange}
              placeholder="Job Title"
              className="p-2 border rounded"
            />
            <input
              type="text"
              name="location"
              value={search.location}
              onChange={handleSearchChange}
              placeholder="Location"
              className="p-2 border rounded"
            />
            <input
              type="text"
              name="industry"
              value={search.industry}
              onChange={handleSearchChange}
              placeholder="Industry"
              className="p-2 border rounded"
            />
          </div>
          <button
            onClick={searchJobs}
            className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg"
          >
            Search
          </button>

          {/* Job Results */}
          <div className="mt-6 grid gap-4">
            {jobs.length === 0 ? (
              <p className="text-gray-500">No jobs found.</p>
            ) : (
              jobs.map((job) => (
                <div key={job.id} className="border rounded p-4 shadow-sm">
                  <h3 className="font-bold text-lg">{job.title}</h3>
                  <p className="text-gray-600">{job.location} — {job.industry}</p>
                  <p className="mt-2">{job.description}</p>
                  <button
                    onClick={() => applyJob(job.id)}
                    className="mt-3 bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded"
                  >
                    Apply
                  </button>
                </div>
              ))
            )}
          </div>
        </section>

        {/* Applications Section */}
        <section className="bg-white shadow-md rounded-lg p-6">
          <h2 className="text-lg font-semibold mb-4">My Applications</h2>
          {applications.length === 0 ? (
            <p className="text-gray-500">You haven’t applied to any jobs yet.</p>
          ) : (
            <table className="w-full border-collapse border">
              <thead>
                <tr className="bg-gray-100">
                  <th className="border p-2">Job Title</th>
                  <th className="border p-2">Status</th>
                </tr>
              </thead>
              <tbody>
                {applications.map((app) => (
                  <tr key={app.id}>
                    <td className="border p-2">{app.jobTitle}</td>
                    <td className="border p-2">{app.status}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
      </main>
    </div>
  );
};

export default JobSeekerDashboard;


