// src/pages/JobSeekerDashboard.jsx
import React, { useState, useEffect } from "react";
import axios from "axios";
import "./Dashboard.css";

const JobSeekerDashboard = () => {
  const [activeTab, setActiveTab] = useState("search"); // search or applied
  const [jobs, setJobs] = useState([]);
  const [appliedJobs, setAppliedJobs] = useState([]);

  const jobSeekerId = 1; // Replace with logged-in job seeker ID or from auth

  const dummyJobs = [
    {
      id: 101,
      title: "Frontend Developer",
      description: "React.js, HTML, CSS",
      location: "Chennai",
      salary: "25k-35k",
    },
    {
      id: 102,
      title: "Backend Developer",
      description: "C#, .NET, SQL",
      location: "Bangalore",
      salary: "30k-40k",
    },
  ];

  // Fetch all jobs
  useEffect(() => {
    const fetchJobs = async () => {
      try {
        const res = await axios.get("http://localhost:5290/api/Jobs");
        setJobs(res.data.length ? res.data : dummyJobs);
      } catch (err) {
        console.log("Error fetching jobs, using dummy data", err);
        setJobs(dummyJobs);
      }
    };

    fetchJobs();
  }, []);

  // Fetch applied jobs
  useEffect(() => {
    const fetchAppliedJobs = async () => {
      try {
        const res = await axios.get(
          `http://localhost:5290/api/Application/jobseeker/${jobSeekerId}`
        );
        setAppliedJobs(res.data || []);
      } catch (err) {
        console.log("Error fetching applied jobs", err);
        setAppliedJobs([]);
      }
    };

    fetchAppliedJobs();
  }, []);

  const handleApply = async (job) => {
    try {
      const payload = { jobId: job.id, jobSeekerId };
      await axios.post("http://localhost:5290/api/Application", payload);

      setAppliedJobs([...appliedJobs, job]);
      alert(`Applied to ${job.title} successfully!`);
    } catch (err) {
      console.log("Error applying to job, adding dummy", err);
      setAppliedJobs([...appliedJobs, job]);
    }
  };

  return (
    <div className="dashboard-page">
      <h1 className="dashboard-title">Welcome Job Seeker!</h1>

      <div style={{ marginBottom: "20px" }}>
        <button onClick={() => setActiveTab("search")}>Search Jobs</button>
        <button onClick={() => setActiveTab("applied")}>Applied Jobs</button>
      </div>

      {activeTab === "search" && (
        <div className="dashboard-cards-container">
          {jobs.map((job) => (
            <div key={job.id} className="dashboard-card">
              <h3>{job.title}</h3>
              <p>{job.description}</p>
              <p>Location: {job.location}</p>
              <p>Salary: {job.salary}</p>
              <button
                className="apply-btn"
                onClick={() => handleApply(job)}
                disabled={appliedJobs.some((aj) => aj.id === job.id)}
              >
                {appliedJobs.some((aj) => aj.id === job.id) ? "Applied" : "Apply"}
              </button>
            </div>
          ))}
        </div>
      )}

      {activeTab === "applied" && (
        <div className="dashboard-cards-container">
          {appliedJobs.length > 0 ? (
            appliedJobs.map((job) => (
              <div key={job.id} className="dashboard-card applied">
                <h3>{job.title}</h3>
                <p>{job.description}</p>
                <p>Location: {job.location}</p>
                <p>Salary: {job.salary}</p>
                <button className="applied-btn" disabled>
                  Applied
                </button>
              </div>
            ))
          ) : (
            <p className="no-applied">You have not applied to any jobs yet.</p>
          )}
        </div>
      )}
    </div>
  );
};

export default JobSeekerDashboard;

// src/pages/JobSeekerDashboard.jsx
import React, { useEffect, useState } from "react";
import axios from "axios";
import "./Dashboard.css";

const dummyJobs = [
  { id: 1, title: "Frontend Developer", company: "Tech Corp", location: "Remote", description: "Build amazing UIs." },
  { id: 2, title: "Backend Developer", company: "Data Systems", location: "Chennai", description: "Work with APIs and DBs." },
  { id: 3, title: "Fullstack Engineer", company: "InnovateX", location: "Bangalore", description: "Work on end-to-end solutions." },
];

const JobSeekerDashboard = () => {
  const [userName, setUserName] = useState("");
  const [jobs, setJobs] = useState([]);
  const [appliedJobs, setAppliedJobs] = useState([]);
  const [activeTab, setActiveTab] = useState("search"); 
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const name = localStorage.getItem("userName") || "Job Seeker";
    setUserName(name);

    const fetchJobs = async () => {
      try {
        const res = await axios.get("http://localhost:5290/api/Job");
        setJobs(res.data);
      } catch (err) {
        setJobs(dummyJobs);
      }
      setLoading(false);
    };

    const fetchAppliedJobs = async () => {
      try {
        const userId = localStorage.getItem("userId") || 1;
        const res = await axios.get(`http://localhost:5290/api/Application/jobseeker/${userId}`);
        setAppliedJobs(res.data);
      } catch (err) {
        setAppliedJobs([]);
      }
    };

    fetchJobs();
    fetchAppliedJobs();
  }, []);

  const handleApply = (job) => {
    setAppliedJobs([...appliedJobs, job]);
  };

  if (loading) return <p className="loading">Loading...</p>;

  return (
    <div className="dashboard-page">
      <header className="dashboard-header">
        <h1>Welcome,JobSeeker!</h1>
        <p className="quote">"Opportunities don't happen. You create them."</p>
      </header>

      <div className="tabs">
        <button
          className={activeTab === "search" ? "tab active" : "tab"}
          onClick={() => setActiveTab("search")}
        >
          Search Jobs
        </button>
        <button
          className={activeTab === "applied" ? "tab active" : "tab"}
          onClick={() => setActiveTab("applied")}
        >
          Applied Jobs
        </button>
      </div>

      <div className="jobs-grid">
        {activeTab === "search" &&
          jobs.map((job) => (
            <div key={job.id} className="job-card">
              <h3>{job.title}</h3>
              <p className="company">{job.company} - {job.location}</p>
              <p className="desc">{job.description}</p>
              <button className="apply-btn" onClick={() => handleApply(job)}>Apply Job</button>
            </div>
          ))}

        {activeTab === "applied" &&
          (appliedJobs.length > 0 ? (
            appliedJobs.map((job) => (
              <div key={job.id} className="job-card applied">
                <h3>{job.title}</h3>
                <p className="company">{job.company} - {job.location}</p>
                <p className="desc">{job.description}</p>
                <button className="applied-btn" disabled>Applied</button>
              </div>
            ))
          ) : (
            <p className="no-applied">You have not applied to any jobs yet.</p>
          ))}
      </div>
    </div>
  );
};

export default JobSeekerDashboard;

// src/pages/EmployerDashboard.jsx
import React, { useState, useEffect } from "react";
import axios from "axios";
import "./Dashboard.css";

const EmployerDashboard = () => {
  const [activeTab, setActiveTab] = useState("myJobs"); // myJobs or postJob
  const [jobs, setJobs] = useState([]);
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    location: "",
    salary: "",
  });

  const employerId = 1; // Replace with logged-in employer ID or from auth

  const dummyJobs = [
    {
      id: 101,
      title: "Frontend Developer",
      description: "React.js, HTML, CSS",
      location: "Chennai",
      salary: "25k-35k",
    },
    {
      id: 102,
      title: "Backend Developer",
      description: "C#, .NET, SQL",
      location: "Bangalore",
      salary: "30k-40k",
    },
  ];

  // Fetch jobs posted by employer
  useEffect(() => {
    const fetchJobs = async () => {
      try {
        const res = await axios.get(
          `http://localhost:5290/api/Jobs/employer/${employerId}`
        );
        setJobs(res.data.length ? res.data : dummyJobs);
      } catch (err) {
        console.log("Error fetching jobs, using dummy data", err);
        setJobs(dummyJobs);
      }
    };

    fetchJobs();
  }, []);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handlePostJob = async (e) => {
    e.preventDefault();
    const jobPayload = { ...formData, employerId };

    try {
      const res = await axios.post("http://localhost:5290/api/Jobs", jobPayload);
      setJobs([...jobs, res.data]);
      setFormData({ title: "", description: "", location: "", salary: "" });
      setActiveTab("myJobs");
    } catch (err) {
      console.log("Error posting job, adding dummy", err);
      setJobs([...jobs, { ...jobPayload, id: Date.now() }]);
      setFormData({ title: "", description: "", location: "", salary: "" });
      setActiveTab("myJobs");
    }
  };

  return (
    <div className="dashboard-page">
      <h1 className="dashboard-title">Welcome Employer!</h1>

      <div style={{ marginBottom: "20px" }}>
        <button onClick={() => setActiveTab("myJobs")}>My Jobs</button>
        <button onClick={() => setActiveTab("postJob")}>Post Job</button>
      </div>

      {activeTab === "myJobs" && (
        <div className="dashboard-cards-container">
          {jobs.map((job) => (
            <div key={job.id} className="dashboard-card">
              <h3>{job.title}</h3>
              <p>{job.description}</p>
              <p>Location: {job.location}</p>
              <p>Salary: {job.salary}</p>
            </div>
          ))}
        </div>
      )}

      {activeTab === "postJob" && (
        <form onSubmit={handlePostJob} style={{ maxWidth: "500px" }}>
          <input
            type="text"
            name="title"
            placeholder="Job Title"
            value={formData.title}
            onChange={handleChange}
            required
          />
          <textarea
            name="description"
            placeholder="Job Description"
            value={formData.description}
            onChange={handleChange}
            required
          />
          <input
            type="text"
            name="location"
            placeholder="Location"
            value={formData.location}
            onChange={handleChange}
            required
          />
          <input
            type="text"
            name="salary"
            placeholder="Salary"
            value={formData.salary}
            onChange={handleChange}
            required
          />
          <button type="submit">Post Job</button>
        </form>
      )}
    </div>
  );
};

export default EmployerDashboard;

import React from "react";
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import { AuthProvider, useAuth } from "./context/AuthContext";
import Login from "./pages/Login";
import JobSeekerDashboard from "./pages/JobSeekerDashboard";
import EmployerDashboard from "./pages/EmployerDashboard";

const PrivateRoute = ({ children, role }) => {
  const { auth } = useAuth();
  if (!auth) return <Navigate to="/login" />;
  if (role && auth.role !== role) return <Navigate to="/login" />;
  return children;
};

function App() {
  return (
    <AuthProvider>
      <Router>
        <Routes>
          <Route path="/login" element={<Login />} />
          
          <Route
            path="/jobseeker-dashboard"
            element={
              <PrivateRoute role="jobseeker">
                <JobSeekerDashboard />
              </PrivateRoute>
            }
          />
          
          <Route
            path="/employer-dashboard"
            element={
              <PrivateRoute role="employer">
                <EmployerDashboard />
              </PrivateRoute>
            }
          />

          {/* Default route */}
          <Route path="*" element={<Navigate to="/login" />} />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;

import React from "react";
import { useAuth } from "../context/AuthContext";

const EmployerDashboard = () => {
  const { auth, logout } = useAuth();

  return (
    <div className="min-h-screen bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 p-6">
      <div className="bg-white rounded-2xl shadow-lg p-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-4">
          Welcome Employer 🏢
        </h1>
        <p className="text-gray-600 mb-4">
          Your ID: <span className="font-mono">{auth?.userId}</span>
        </p>
        <button
          onClick={logout}
          className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
        >
          Logout
        </button>
      </div>
    </div>
  );
};

export default EmployerDashboard;

import React from "react";
import { useAuth } from "../context/AuthContext";

const JobSeekerDashboard = () => {
  const { auth, logout } = useAuth();

  return (
    <div className="min-h-screen bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 p-6">
      <div className="bg-white rounded-2xl shadow-lg p-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-4">
          Welcome JobSeeker 👋
        </h1>
        <p className="text-gray-600 mb-4">
          Your ID: <span className="font-mono">{auth?.userId}</span>
        </p>
        <button
          onClick={logout}
          className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition"
        >
          Logout
        </button>
      </div>
    </div>
  );
};

export default JobSeekerDashboard;


import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // adjust API URL to your backend
      const res = await axios.post("http://localhost:5290/api/Auth/login", {
        email,
        password,
      });

      const { token, refreshToken } = res.data;
      const role = login(token, refreshToken);

      if (role === "employer") {
        navigate("/employer-dashboard");
      } else if (role === "jobseeker") {
        navigate("/jobseeker-dashboard");
      } else {
        setError("Unknown role, contact admin.");
      }
    } catch (err) {
      setError("Invalid email or password.");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500">
      <div className="bg-white shadow-lg rounded-2xl p-8 w-full max-w-md">
        <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">
          Login
        </h2>
        {error && (
          <p className="text-red-500 text-center text-sm mb-3">{error}</p>
        )}
        <form onSubmit={handleSubmit} className="space-y-4">
          <input
            type="email"
            placeholder="Email"
            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />

          <input
            type="password"
            placeholder="Password"
            className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />

          <button
            type="submit"
            className="w-full py-3 bg-gradient-to-r from-indigo-500 to-pink-500 text-white rounded-lg font-semibold shadow-md hover:opacity-90 transition"
          >
            Login
          </button>
        </form>
      </div>
    </div>
  );
};

export default Login;

import React, { createContext, useContext, useState } from "react";
import { jwtDecode } from "jwt-decode";

export const AuthContext = createContext(null);

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [auth, setAuth] = useState(null);

  const login = (token, refreshToken) => {
    try {
      const decoded = jwtDecode(token);
      const role =
        decoded["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"]?.toLowerCase();
      const userId =
        decoded["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"];

      localStorage.setItem("token", token);
      if (refreshToken) localStorage.setItem("refreshToken", refreshToken);

      setAuth({ token, refreshToken, role, userId });
      return role;
    } catch (err) {
      console.error("JWT decode failed:", err);
      return null;
    }
  };

  const logout = () => {
    localStorage.removeItem("token");
    localStorage.removeItem("refreshToken");
    setAuth(null);
  };

  return (
    <AuthContext.Provider value={{ auth, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

// Export both named + default
export default AuthProvider;
