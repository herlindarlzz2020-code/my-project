import React, { useState, useEffect, useContext } from "react";
import { Container, Form, Button, Card, Alert } from "react-bootstrap";
import api from "../api";
import { AuthContext } from "../context/AuthContext";

function JobSeekerDashboard() {
  const { user } = useContext(AuthContext); // user comes from login context
  const [profile, setProfile] = useState({
    FirstName: "",
    LastName: "",
    Phone: "",
    Qualification: "",
    Skills: "",
    IsActive: true,
  });
  const [jobSeekerId, setJobSeekerId] = useState(null);
  const [message, setMessage] = useState("");

  // Load profile if exists
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const res = await api.get(`/JobSeekers/user/${user.id}`);
        if (res.data) {
          setProfile({
            FirstName: res.data.FirstName || "",
            LastName: res.data.LastName || "",
            Phone: res.data.Phone || "",
            Qualification: res.data.Qualification || "",
            Skills: res.data.Skills || "",
            IsActive: res.data.IsActive ?? true,
          });
          setJobSeekerId(res.data.JobSeekerID);
        }
      } catch (err) {
        console.log("No profile found, will create new one.");
      }
    };
    if (user?.id) fetchProfile();
  }, [user]);

  const handleChange = (e) => {
    setProfile({ ...profile, [e.target.name]: e.target.value });
  };

  const handleSave = async (e) => {
    e.preventDefault();
    try {
      if (jobSeekerId) {
        // Update existing
        await api.put(`/JobSeekers/${jobSeekerId}`, {
          JobSeekerID: jobSeekerId,
          UserID: user.id,
          ...profile,
        });
        setMessage("Profile updated successfully!");
      } else {
        // Create new
        const res = await api.post("/JobSeekers", {
          UserID: user.id,
          ...profile,
        });
        setJobSeekerId(res.data.JobSeekerID);
        setMessage("Profile created successfully!");
      }
    } catch (err) {
      console.error(err);
      setMessage("Error saving profile.");
    }
  };

  return (
    <Container className="mt-4">
      <Card>
        <Card.Body>
          <Card.Title>Job Seeker Profile</Card.Title>
          {message && (
            <Alert variant={message.includes("Error") ? "danger" : "success"}>
              {message}
            </Alert>
          )}
          <Form onSubmit={handleSave}>
            <Form.Group className="mb-3">
              <Form.Label>First Name</Form.Label>
              <Form.Control
                type="text"
                name="FirstName"
                value={profile.FirstName}
                onChange={handleChange}
                required
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Last Name</Form.Label>
              <Form.Control
                type="text"
                name="LastName"
                value={profile.LastName}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Phone</Form.Label>
              <Form.Control
                type="text"
                name="Phone"
                value={profile.Phone}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Qualification</Form.Label>
              <Form.Control
                type="text"
                name="Qualification"
                value={profile.Qualification}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Skills</Form.Label>
              <Form.Control
                type="text"
                name="Skills"
                value={profile.Skills}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Check
                type="checkbox"
                label="Active"
                name="IsActive"
                checked={profile.IsActive}
                onChange={(e) =>
                  setProfile({ ...profile, IsActive: e.target.checked })
                }
              />
            </Form.Group>
            <Button type="submit" variant="primary">
              Save Profile
            </Button>
          </Form>
        </Card.Body>
      </Card>
    </Container>
  );
}

export default JobSeekerDashboard;
