// src/pages/Login.jsx
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";

const API_BASE_URL = "http://localhost:5290/api"; // adjust if different

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError("");

    try {
      const res = await axios.post(`${API_BASE_URL}/Auth/login`, {
        email,
        password,
      });

      // Assume backend sends { token, role }
      const { token, role } = res.data;

      // Save to localStorage
      localStorage.setItem("token", token);
      localStorage.setItem("role", role);

      // Navigate based on role
      if (role === "Employer") {
        navigate("/employer/dashboard");
      } else if (role === "JobSeeker") {
        navigate("/jobseeker/dashboard");
      } else {
        setError("Invalid role, contact admin.");
      }
    } catch (err) {
      console.error(err);
      setError("Invalid credentials. Please try again.");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500">
      <div className="bg-white p-8 rounded-2xl shadow-lg w-96">
        <h2 className="text-2xl font-bold text-center mb-6 text-gray-800">Login</h2>
        {error && <p className="text-red-500 text-center mb-3">{error}</p>}

        <form onSubmit={handleLogin}>
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full mb-4 px-4 py-2 border rounded-lg focus:ring focus:ring-indigo-300"
            required
          />
          <input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full mb-6 px-4 py-2 border rounded-lg focus:ring focus:ring-indigo-300"
            required
          />
          <button
            type="submit"
            className="w-full bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white py-2 rounded-lg hover:opacity-90 transition"
          >
            Login
          </button>
        </form>
      </div>
    </div>
  );
}

import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

export default function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post("http://localhost:5290/api/Auth/login", {
        email,
        password,
      });

      if (response.data) {
        const { token, role } = response.data;

        // Save token to localStorage
        localStorage.setItem("token", token);
        localStorage.setItem("role", role);

        // Navigate based on role
        if (role === "Employer") {
          navigate("/employer-dashboard");
        } else if (role === "JobSeeker") {
          navigate("/jobseeker-dashboard");
        } else {
          alert("Unknown role. Please contact support.");
        }
      }
    } catch (error) {
      console.error("Login failed:", error);
      alert("Error connecting to server. Please try again.");
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-r from-purple-500 to-indigo-600">
      <div className="bg-white p-8 rounded-2xl shadow-lg w-full max-w-md">
        <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">Login</h2>
        <form onSubmit={handleLogin} className="space-y-4">
          <div>
            <label className="block text-gray-700">Email</label>
            <input
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>
          <div>
            <label className="block text-gray-700">Password</label>
            <input
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500"
              required
            />
          </div>
          <button
            type="submit"
            className="w-full py-2 bg-gradient-to-r from-purple-500 to-indigo-600 text-white rounded-lg shadow-md hover:opacity-90 transition"
          >
            Login
          </button>
        </form>
      </div>
    </div>
  );
}

import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { useAuth } from "../context/AuthContext";
import "../styles/Login.css"; // ✅ keeping your CSS theme

const Login = () => {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState("");
  const navigate = useNavigate();
  const { login } = useAuth();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");

    try {
      const response = await axios.post("http://localhost:5290/api/Auth/login", {
        email,
        password,
      });

      if (response.data.success) {
        const userData = {
          name: response.data.name,
          email: response.data.email,
          role: response.data.role, // "Employer" or "JobSeeker"
        };

        login(userData);

        // ✅ Redirect based on role
        if (userData.role === "Employer") {
          navigate("/employer/dashboard");
        } else if (userData.role === "JobSeeker") {
          navigate("/jobseeker/dashboard");
        } else {
          navigate("/");
        }
      } else {
        setError(response.data.message || "Invalid credentials");
      }
    } catch (err) {
      setError("Something went wrong. Please try again.");
    }
  };

  return (
    <div className="login-container">
      <form onSubmit={handleSubmit} className="login-form">
        <h2>Login</h2>
        {error && <p className="error">{error}</p>}

        <div className="form-group">
          <label>Email</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>

        <div className="form-group">
          <label>Password</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>

        <button type="submit" className="btn-login">Login</button>
      </form>
    </div>
  );
};

export default Login;

import React, { createContext, useState, useContext, useEffect } from "react";

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  // Keep user logged in even after refresh
  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  const login = (userData) => {
    setUser(userData);
    localStorage.setItem("user", JSON.stringify(userData));
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem("user");
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);// App.js


import React from "react";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./context/AuthContext";   // ✅ make sure this is correct path
import HomePage from "./pages/HomePage";
import LoginPage from "./pages/LoginPage";
import RegisterPage from "./pages/RegisterPage";
import JobSeekerDashboard from "./pages/JobSeekerDashboard";
import EmployerDashboard from "./pages/EmployerDashboard";
import PrivateRoute from "./components/PrivateRoute";

function App() {
  return (
    <AuthProvider>   {/* ✅ Wrap everything here */}
      <Router>
        <Routes>
          <Route path="/" element={<HomePage />} />
          <Route path="/login" element={<LoginPage />} />
          <Route path="/register" element={<RegisterPage />} />

          <Route
            path="/jobseeker-dashboard"
            element={
              <PrivateRoute roles={["jobseeker"]}>
                <JobSeekerDashboard />
              </PrivateRoute>
            }
          />

          <Route
            path="/employer-dashboard"
            element={
              <PrivateRoute roles={["employer"]}>
                <EmployerDashboard />
              </PrivateRoute>
            }
          />
        </Routes>
      </Router>
    </AuthProvider>
  );
}

export default App;


import React, { createContext, useContext, useState } from "react";
import jwtDecode from "jwt-decode";

export const AuthContext = createContext(null);

export const useAuth = () => useContext(AuthContext);

export const AuthProvider = ({ children }) => {
  const [auth, setAuth] = useState(null);

  const login = (token) => {
    try {
      const decoded = jwtDecode(token);
      const role =
        decoded["http://schemas.microsoft.com/ws/2008/06/identity/claims/role"] ||
        decoded["role"];
      const id =
        decoded["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"] ||
        decoded["nameid"];
      const username =
        decoded["http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"] ||
        decoded["unique_name"];

      const userData = {
        token,
        role: role?.toLowerCase(),
        user: { id, username },
      };

      setAuth(userData);
      localStorage.setItem("auth", JSON.stringify(userData));
    } catch (err) {
      console.error("Invalid token", err);
    }
  };

  const logout = () => {
    setAuth(null);
    localStorage.removeItem("auth");
  };

  return (
    <AuthContext.Provider value={{ auth, setAuth, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

import React, { useState, useEffect, useContext } from "react";
import { Container, Form, Button, Card, Alert } from "react-bootstrap";
import api from "../api";
import { AuthContext } from "../context/AuthContext";

function JobSeekerDashboard() {
  const { user } = useContext(AuthContext); // user comes from login context
  const [profile, setProfile] = useState({
    FirstName: "",
    LastName: "",
    Phone: "",
    Qualification: "",
    Skills: "",
    IsActive: true,
  });
  const [jobSeekerId, setJobSeekerId] = useState(null);
  const [message, setMessage] = useState("");

  // Load profile if exists
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const res = await api.get(`/JobSeekers/user/${user.id}`);
        if (res.data) {
          setProfile({
            FirstName: res.data.FirstName || "",
            LastName: res.data.LastName || "",
            Phone: res.data.Phone || "",
            Qualification: res.data.Qualification || "",
            Skills: res.data.Skills || "",
            IsActive: res.data.IsActive ?? true,
          });
          setJobSeekerId(res.data.JobSeekerID);
        }
      } catch (err) {
        console.log("No profile found, will create new one.");
      }
    };
    if (user?.id) fetchProfile();
  }, [user]);

  const handleChange = (e) => {
    setProfile({ ...profile, [e.target.name]: e.target.value });
  };

  const handleSave = async (e) => {
    e.preventDefault();
    try {
      if (jobSeekerId) {
        // Update existing
        await api.put(`/JobSeekers/${jobSeekerId}`, {
          JobSeekerID: jobSeekerId,
          UserID: user.id,
          ...profile,
        });
        setMessage("Profile updated successfully!");
      } else {
        // Create new
        const res = await api.post("/JobSeekers", {
          UserID: user.id,
          ...profile,
        });
        setJobSeekerId(res.data.JobSeekerID);
        setMessage("Profile created successfully!");
      }
    } catch (err) {
      console.error(err);
      setMessage("Error saving profile.");
    }
  };

  return (
    <Container className="mt-4">
      <Card>
        <Card.Body>
          <Card.Title>Job Seeker Profile</Card.Title>
          {message && (
            <Alert variant={message.includes("Error") ? "danger" : "success"}>
              {message}
            </Alert>
          )}
          <Form onSubmit={handleSave}>
            <Form.Group className="mb-3">
              <Form.Label>First Name</Form.Label>
              <Form.Control
                type="text"
                name="FirstName"
                value={profile.FirstName}
                onChange={handleChange}
                required
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Last Name</Form.Label>
              <Form.Control
                type="text"
                name="LastName"
                value={profile.LastName}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Phone</Form.Label>
              <Form.Control
                type="text"
                name="Phone"
                value={profile.Phone}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Qualification</Form.Label>
              <Form.Control
                type="text"
                name="Qualification"
                value={profile.Qualification}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Label>Skills</Form.Label>
              <Form.Control
                type="text"
                name="Skills"
                value={profile.Skills}
                onChange={handleChange}
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Check
                type="checkbox"
                label="Active"
                name="IsActive"
                checked={profile.IsActive}
                onChange={(e) =>
                  setProfile({ ...profile, IsActive: e.target.checked })
                }
              />
            </Form.Group>
            <Button type="submit" variant="primary">
              Save Profile
            </Button>
          </Form>
        </Card.Body>
      </Card>
    </Container>
  );
}

export default JobSeekerDashboard;
